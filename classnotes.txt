Static Response :
if the response is not varied from time to time and person to pero
then it is considered as static respose.

Dynamic Response :
if the response is varied from time to time and person to person
then it is considered as dynamic response.

Login.html/Login ::  static response
update-Profile   ::  Dynamic Response
check Balance    ::  Dynamic Response

Java  - Spring Boot +  Database 
JS    - Node JS,Express + Database
.Net  - Asp.Net       + Database
Python - Django + Database

Framework  vs Library
----------------------
Framework  :  spring Boot(java), Asp.Net, Node JS,Express  
-complete application development.
Library    :  Bootstrap, React JS, JQuery


Django: 
------
Django is a free and open-source web framework 
It is writen in Python Language 
Model-view-Template architecture pattern.
Django-maintained by Django software foundation


Storey behind Django:
NewsPaper - Lowrence Journal
djangoProject.com
 
Available - 2005 July

MVC and MVT 
Python maintained by PSF


Django Features:
1.Fast:
  Django was designed to help developer/programmer
  take application from concept to completion
  as quick as possible.
  
2.Secure: Cross-Site Request Forgery,

3.Full Loaded:
  django provide common web development tasks like user auth
  content management/adminstaration, site map, RSS.
  

4.Scalable:
  to meet heavy trafic demands, django has abiltiy.
5.Versatile: ecom,web appl, social media web apps, cms
===================================================

Sequence of activities:


>python --version
>py -m django --vesion 

install django using -pip/pip3 

pip install django 


Project = collection of applications + configuratin info

How to create django project:
---------------------------
create virtual env :
-------------------------------------
python -m venv django-env

django-env\Scripts\activate

pip install django

python.exe -m pip install --upgrade pip

>django-admin startproject firstproject

manage.py:
The most commonly used python script file is manage.py
command line utililty to interact Django Project in various ways
like - run server, run test cases, create migration, create users 

__init__.py
it is blank/empty python file.Django treated as current folder is python package.

asgi.py : application server gateway interface
wsgi.py : web server gateway interface.
          we can use this file setting, while deploying the application in production

		  
settings.py : we have to specify all our project settings 
and configuration like, installed apps, middleware info, database configuratin info.


urls.py: 
store all our application url-patterns.  

=============================
Create First Web application.

startproject
startapp 
runserver 

step1:>django-admin startproject hdfcproject
step2:hdfcproject>py manage.py startapp userapp

	  
step3:runserver 


manage.py:
        It is commandline utility, to interact with django project.
		
		py manage.py startapp 
		py manage.py runserver 
		py manage.py makemigrations
		py manage.py migrate
		py manage.py createsuperuser 
		
		run testcase 
		etc .
		
	

Create a view for applicationin views.py 

View is responsible to preate requied response.
How to prepare required responses.

render()
HttpResponse()

2 Types of views
1)Functional Based views 
2)Class based views


==========================================
Static (Response) website using Django Application.
Home About Service Contact Login 
http:127.0.0.1:8000/index
http:127.0.0.1:8000/about
http:127.0.0.1:8000/service
http:127.0.0.1:8000/contact
http:127.0.0.1:8000/login


https://retail.onlinesbi.sbi/retail/login.htm -

not  varied from user to user and time to time.
==============================================
Step1:create virutal env and activate
     python -m env xyz
     xyz/Scripts/activate

step2:create project/startproject
      django-admin startproject hdfcproject 

step3:create app/startapp 
      cd hdfcproject
      py manage.py startapp webapp

Note:apply migrations
      py manage.py migrate 

step4:runserver
      py manage.py runserver 


What is manage.py?

command line utililty tool, to interact with django web server/appliation.

We are defining URL Patterns at project level.

New Requirement is?

We need to define URL Patterns at application level?

===============================================
startproject
startapp
runserver 

project can contains - mutliple appliations, 
each application contains views.

webapp-views.py(members)  10
userapp-views.py   - 20
paymentapp-views.py -39
logapp-views.py -40

defining url-pattern for all views of all appliations inside project urls.py file,

project creates - maintance problems
It reduce reusability.


Sol : Define url pattern at appliation level?




Advantages:
The main Advantage of defining urlpattern at application insted of project level are
1) It promotes reusability of Django Application across multiple projects
2) Project level urls.py file, will be clean and more readable.

Create static website using Djago
=================================
python
django 

venv 

>django-admin startproject staticproject

>cd startproject

>py manage.py startapp webapp 

>py manage.py migrate

>py manage.py runserver

localhost:8000/web/index   - index.html
localhost:8000/web/about   - about.html
localhost:8000/web/service   - service.html
localhost:8000/web/contact   - contact.html

Defing url patterns (urls.py) at project level
Defing url patterns (urls.py) at appliation level
==================================================
What is djanog views.py?
what is view?
it handle request, prepare response.
How to prepare response?
	HttpResponse 
	render

django views - we can create two ways?
class based views
function based views?

once views are ready?
we have to define urlpatterns?

How to define url-patterns?
Where to define url-pattern?
We can define url patterns/urls.py at project level?
We can define url patterns/urls.py at Application level?

===========================================
Template Tags: {{}}

pyton views.py - we can inject dynamic content to templates file using template tags.
Template tags or template variables.

how to Send data from views to template?
==========================================
render(1,2,3)
render(request,'index.html', context={'one':100,'two':200})


Working with Database?
======================
we required to interact with databases to store our application data and retrive our stored data.

Create New Employee: insert data into database table.
get all employee   : retrive the our store data 

Django provide inbuild database ie sqlite3

small to medium application thsi database is enough.
django will support other databases like oracle db,mysql db, pg, maria db, mongo db etc.

How to configure Database?
==========================
Django by default provides sqlite3 database. If we want to use this database, we are not required to do any configution.

default sqlite3 configutions in - settings.py
==============================================
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

New Requirement?
if we dont want to connect sqlite3 database, we want configure mysql database.

ENGINE
Name
USER
PASSWORD
HOST
PORT

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'crud',
        'USER': 'root',
        'PASSWORD': 'root'
    }
}

checking configurations?
============================
How to check db connection success or not?

>py manage.py shell
interactive console
>> from django.db import connection
>>con=connection.cursor()

Note: if we are not getting any error means 
db connection success.


import pymysql
pymysql.install_as_MySQLdb()


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'crud',
        'USER': 'root',
        'PASSWORD': 'root'
    }
}

What is Model class?
A Model is a python class, which contanis database information
Each model maps to one database table.
Every model is a python class, which is the child class of django.db.models.Model class.
Each attribute of model class, represents a database field.
========================================
Where are writing model classes? inside models.py 

Note: Model class will be converted into database table.
CRUD - database name.

makemigrations vs migrate
 

 class Employee(models.Model):
    eno = models.IntegerField()
    ename = models.CharField(max_length=24)
    esal = models.FloatField()

	
	
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'crud',
        'USER': 'root',
        'PASSWORD': 'root'
    }
}


import pymysql
pymysql.install_as_MySQLdb()


admin.site.register(Employee)

==========================================
create superuser?

py manage.py createsuperuser

username
emailid
password

login into django application
127.0.0.1:8000/admin   - enter the credentials 


=========================================
Develop Template Based Application
1)Create of Project
2)Create of Application
3)Add this appliation to the project in settings.py,
  so that Django aware of application.
4)Create a 'templates' folder inside a main project folder.
5)Add templates folder to settings.py file,
  so that Django can aware of our templates.
6)Create an html file inside templates folders.
7)Define function based view inside views.py
8)Define url pattern either at application or at project level
9)Run server and Test urls.
=============================================
Create Employee Model class and Django, Application.
Insert Employee Data in Django using Django-Admin dashboard,
Display Employee Data in UI/template file(employee html).

1.startproject 
  django-admin startproject dbemp
2.startapp
   cd dbemp
   py manage.py startapp empapp 
   
   Register your app in project 

3.configure database
  How to configure?
  
  pip install pymysql
  pymysql.install_as_MySQLdb()
  
  
  update DATABASES settings - project/settings.py 
  
  
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'pro8pm',
        'USER': 'root',
        'PASSWORD': 'root'
    }
}

  
4.how to Check database configuration
  py manage.py shell
  using connection object 
  from django.db import connection
  con=connection.cursor()
  
  Note:if your are not geting any error mens connection success.
  
5.Create Employee Model 

  class Employee(models.Model):
		eid = models.IntegerField()
		ename =models.charField(max_length=32)
		esal = models.floatField()
6.Register your models admin.py 

	admin.site.register(Employee)
	
7.apply migrations.
  makemigrations
  migrate
  
  difference between makemigrations and migrate
  makemigrations is - responsible to generate sql code for python model class
  migrate is- responsiblity to execute sql code, table will be created in database

8.insert employee data using django-adminstration/dashboard
  py manage.py createsuperuser
  username :
  email id :
  password:
9. Run Django server
>py manage.py runserver

10.Display employee data in template file.  
  127.0.0.1:8000/emp 
  
  views.py
  
  def empdata(request):
    emp_list = Employee.objects.all()
    emp_dict = {'emp_list': emp_list}
    return render(request, 'emp.html', context=emp_dict)

  emp.html
  ========
  








